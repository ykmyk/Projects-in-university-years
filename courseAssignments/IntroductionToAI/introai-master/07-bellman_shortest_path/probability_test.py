#!/usr/bin/env python3

import sys
sys.path.append("..")
import check_versions
import numpy
from numpy import array
from robot_test import Environment
from robot_control import RobotControl

# Run a single tests to verify the correctness of calculating the probabilities and policies
def evaluate(destination, rotation_probability, energy, expected_distance, expected_policy):
    env = Environment(destination=array(destination), energy=array(energy), rotation_probability=array(rotation_probability))

    print("Test energy map:")
    print(energy)
    print("Destination", destination)
    print("Probabilities of rotations: forward", env.forward_probability, "right", env.right_probability, "backward", env.backward_probability, "left", env.left_probability)

    robot = RobotControl(env)
    distance = robot.get_distance()
    policy = robot.get_policy()

    print("Expected distance:")
    print(expected_distance)
    print("Your distance:")
    print(distance)
    print("Expected policy:")
    print(expected_policy)
    print("Your policy:")
    print(policy)

    incorrect_policies = 0
    max_distance_diff = 0.
    for i in range(env.rows):
        for j in range(env.columns):
              max_distance_diff = max(max_distance_diff, abs(distance[i,j] - expected_distance[i,j]))
              if policy[i,j] != expected_policy[i,j]:
                  incorrect_policies += 1

    print("The number of positions with incorrect policies is", incorrect_policies)
    print("The maximal of differences between the correct and your distances is", max_distance_diff)

    return (incorrect_policies, max_distance_diff)

def main():
    # destination, rotation_probability, energy, expected_distance, expected_policy
    tests = {
        "1": ((1,1), (1,0,0,0),
array([[ 9., 2., 3. ],
       [ 4., 0., 5. ],
       [ 6., 7., 8. ]]),
array([[ 2., 0., 2. ],
       [ 0., 0., 0. ],
       [ 4., 0., 5. ]]),
array([[1, 2, 3],
       [1, 0, 3],
       [0, 0, 0]])),

        "2": ((1,1), (0,1,0,0),
array([[ 9., 2., 3. ],
       [ 4., 0., 5. ],
       [ 6., 7., 8. ]]),
array([[ 2., 0., 2. ],
       [ 0., 0., 0. ],
       [ 4., 0., 5. ]]),
array([[0, 1, 2],
       [0, 0, 2],
       [3, 3, 1]])),

        "3": ((1,1), (0,0,1,0),
array([[ 9., 2., 3. ],
       [ 4., 0., 5. ],
       [ 6., 7., 8. ]]),
array([[ 2., 0., 2. ],
       [ 0., 0., 0. ],
       [ 4., 0., 5. ]]),
array([[3, 0, 1],
       [3, 0, 1],
       [2, 2, 0]])),

        "4": ((1,1), (0,0,0,1),
array([[ 9., 2., 3. ],
       [ 4., 0., 5. ],
       [ 6., 7., 8. ]]),
array([[ 2., 0., 2. ],
       [ 0., 0., 0. ],
       [ 4., 0., 5. ]]),
array([[2, 3, 0],
       [2, 0, 0],
       [1, 1, 1]])),

       "5": ((0,0), (1,0,0,0),
array([[  0., 11., 12. ],
       [ 13., 14., 15. ],
       [ 16., 17., 18. ]]),
array([[ 0.,  0.,  0.],
       [ 0., 11., 12.],
       [ 0., 11., 12.]]),
array([[0, 3, 1],
       [0, 0, 0],
       [2, 2, 2]])),

       "6": ((0,2), (1,0,0,0),
array([[ 10., 11.,  0. ],
       [ 13., 14., 15. ],
       [ 16., 17., 18. ]]),
array([[ 0.,  0.,  0.],
       [10., 11.,  0.],
       [10., 11.,  0.]]),
array([[3, 1, 0],
       [0, 0, 0],
       [2, 2, 2]])),

       "7": ((2,0), (1,0,0,0),
array([[ 10., 11., 12. ],
       [ 13., 14., 15. ],
       [  0., 17., 18. ]]),
array([[ 0., 10., 10.],
       [ 0., 13., 13.],
       [ 0.,  0.,  0.]]),
array([[0, 3, 1],
       [2, 3, 1],
       [0, 3, 1]])),

       "8": ((2,2), (1,0,0,0),
array([[ 10., 11., 12. ],
       [ 13., 14., 15. ],
       [ 16., 17.,  0. ]]),
array([[12., 12.,  0.],
       [15., 15.,  0.],
       [ 0.,  0.,  0.]]),
array([[3, 1, 0],
       [3, 1, 2],
       [3, 1, 0]])),

        "9": ((1,1), (1,0,0,0),
array([[ 1., 2., 3. ],
       [ 4., 0., 5. ],
       [ 6., 7., 8. ]]),
array([[ 2., 0., 2. ],
       [ 0., 0., 0. ],
       [ 3., 0., 5. ]]),
array([[1, 2, 3],
       [1, 0, 3],
       [2, 0, 0]])),

        "10": ((1,1), (1,0,0,0),
array([[ 100., 100., 100., 101., 100. ],
       [ 101., 0., 1., 1., 100. ],
       [ 100., 6., 4., 1., 100. ],
       [ 100., 1., 1., 1., 100. ],
       [ 100., 1., 4., 6., 100. ],
       [ 100., 1., 1., 1., 100. ],
       [ 100., 6., 4., 1., 100. ],
       [ 100., 1., 1., 1., 100. ],
       [ 100., 1., 4., 6., 100. ],
       [ 100., 1., 1., 1., 100. ],
       [ 100., 6., 4., 1., 100. ],
       [ 100., 1., 1., 1., 100. ],
       [ 100., 1., 4., 6., 100. ],
       [ 100., 1., 1., 1., 100. ],
       [ 100., 100., 100., 100., 100. ]]),
array([[100.,   0.,   1.,   2., 102.],
       [  0.,   0.,   0.,   1.,   2.],
       [  6.,   0.,   1.,   2.,   3.],
       [  6.,   5.,   4.,   3.,   4.],
       [  7.,   6.,   5.,   4.,  10.],
       [  8.,   7.,   8.,   9.,  10.],
       [ 14.,   8.,   9.,  10.,  11.],
       [ 14.,  13.,  12.,  11.,  12.],
       [ 15.,  14.,  13.,  12.,  18.],
       [ 16.,  15.,  16.,  17.,  18.],
       [ 22.,  16.,  17.,  18.,  19.],
       [ 22.,  21.,  20.,  19.,  20.],
       [ 23.,  22.,  21.,  20.,  26.],
       [ 24.,  23.,  24.,  25.,  26.],
       [124.,  24.,  25.,  26., 126.]]),
array([[1, 2, 2, 2, 2],
       [1, 0, 3, 3, 3],
       [1, 0, 0, 0, 3],
       [1, 1, 1, 0, 3],
       [1, 0, 0, 0, 3],
       [1, 0, 3, 3, 3],
       [1, 0, 0, 0, 3],
       [1, 1, 1, 0, 3],
       [1, 0, 0, 0, 3],
       [1, 0, 3, 3, 3],
       [1, 0, 0, 0, 3],
       [1, 1, 1, 0, 3],
       [1, 0, 0, 0, 3],
       [1, 0, 3, 3, 3],
       [0, 0, 0, 0, 0]])),

        "11": ((1,1), (.4,.2,.2,.2),
array([[ 9., 2., 3. ],
       [ 4., 0., 5. ],
       [ 6., 7., 8. ]]),
array([[24.240741, 17.166667, 25.425926],
       [17.574074,  0.      , 16.759259],
       [26.87037 , 17.166667, 25.796296]]),
array([[1, 2, 3],
       [1, 0, 3],
       [0, 0, 0]])),

        "12": ((1,1), (.4,.3,.2,.1),
array([[ 9., 2., 3. ],
       [ 4., 0., 5. ],
       [ 6., 7., 8. ]]),
array([[21.720018, 16.494243, 23.059375],
       [16.219411,  0.      , 15.067704],
       [24.446227, 16.361499, 24.060094]]),
array([[1, 2, 2],
       [1, 0, 3],
       [0, 0, 3]])),

        "13": ((0,1), (.4,.2,.2,.2),
array([[ 1., 0., 1. ],
       [ 1., 10., 1. ],
       [ 1., 1., 1. ],
       [ 1., 1., 1. ],
       [ 1., 1., 1. ],
       [ 1., 1., 1. ],
       [ 1., 1., 1. ]]),
array([[ 6.536001,  0.      ,  6.536001],
       [13.587524,  9.832894, 13.587524],
       [17.445199, 18.98942 , 17.445199],
       [18.616328, 18.778611, 18.616328],
       [16.620752, 16.335489, 16.620752],
       [13.265595, 12.328666, 13.265595],
       [ 9.556481,  6.888325,  9.556481]]),
array([[1, 0, 3],
       [0, 0, 0],
       [0, 1, 0],
       [2, 2, 2],
       [2, 2, 2],
       [2, 2, 2],
       [2, 2, 2]])),    

       "14": ((1,2), (1,0,0,0),
array([[1.864 , 4.4329, 6.312 , 2.6543, 1.912 ],
       [5.8338, 2.7948, 0.    , 0.1748, 2.9702],
       [1.3889, 2.9069, 1.2973, 8.5596, 0.8003]]),
array([[4.7411, 2.7948, 0.    , 0.1748, 2.8291],
       [2.7948, 0.    , 0.    , 0.    , 0.1748],
       [3.9453, 1.2973, 0.    , 0.1748, 3.145 ]]),
array([[3, 2, 2, 2, 3],
       [1, 1, 0, 3, 3],
       [3, 1, 0, 0, 0]])),

       "15": ((3,2), (1,0,0,0),
array([[1.864 , 4.4329, 6.312 , 2.6543, 1.912 ],
       [5.8338, 2.7948, 3.4227, 0.1748, 2.9702],
       [1.3889, 2.9069, 1.2973, 8.5596, 0.8003],
       [0.9874, 5.1054, 0.    , 1.3459, 5.5921],
       [3.226 , 0.1908, 6.7132, 1.7523, 4.3909],
       [2.0506, 8.7113, 0.7706, 0.8218, 2.2346],
       [0.8339, 3.2938, 0.543 , 9.6469, 1.7962]]),
array([[8.7847, 6.999 , 4.72  , 4.8948, 7.5491],
       [5.5931, 4.2042, 1.2973, 4.72  , 4.8948],
       [4.2042, 1.2973, 0.    , 1.2973, 5.5931],
       [5.1054, 0.    , 0.    , 0.    , 1.3459],
       [5.2962, 5.1054, 0.    , 1.3459, 3.0982],
       [6.1546, 4.6906, 3.92  , 3.0982, 3.92  ],
       [7.9508, 5.2336, 4.6906, 3.92  , 6.1546]]),
array([[0, 2, 2, 2, 3],
       [2, 2, 2, 3, 3],
       [1, 1, 2, 3, 1],
       [1, 1, 0, 3, 3],
       [1, 0, 0, 0, 3],
       [3, 1, 1, 0, 3],
       [3, 1, 0, 0, 0]])),

       "16": ((3, 4), (0.4, 0.361247, 0.025903, 0.21285),
array([[ 1.864041,  4.432889,  6.311956,  2.65428 ,  1.91201 ,  5.833797,  2.794818,  3.422686,  0.17483 ],
       [ 2.970219,  1.388945,  2.906939,  1.297296,  8.559583,  0.80034 ,  0.987354,  5.105444, 10.495868],
       [ 1.34585 ,  5.592108,  3.226013,  0.190834,  6.713173,  1.752331,  4.390865,  2.050603,  8.711304],
       [ 0.77061 ,  0.82185 ,  2.234567,  0.833858,  0.      ,  0.543006,  9.646865,  1.796218,  3.357212],
       [ 4.177859,  7.938566,  0.284866,  1.532829,  9.413375,  1.940443,  2.902589,  5.075948,  4.755532],
       [ 4.019696,  1.06274 ,  1.915935,  5.316311,  6.777291,  6.280372, 11.464919,  0.286654,  0.951157],
       [ 3.748847,  0.572896,  3.756583,  1.870234,  2.215651, 10.424481, 22.641383,  3.547671,  4.154724]]),
 array([[54.631103, 49.148562, 44.051422, 41.5968  , 42.955345, 43.331933, 50.207206, 56.649491, 60.678432],
       [49.976861, 44.522961, 36.966441, 32.616491, 29.560314, 34.889388, 42.892117, 52.00128 , 57.256641],
       [48.016812, 38.137829, 28.585533, 22.189906, 14.662583, 24.511179, 36.787217, 49.598934, 54.339171],
       [48.010016, 38.935492, 25.48456 , 14.659805,  0.      , 17.207058, 33.071517, 49.24852 , 55.190526],
       [51.44677 , 39.885665, 31.511032, 23.873766, 17.794324, 29.127961, 43.016231, 51.237722, 57.081004],
       [53.743994, 46.727582, 39.235175, 36.371691, 38.127261, 43.723333, 52.891619, 59.984353, 60.096363],
       [54.95572 , 50.891885, 45.850797, 45.55303 , 46.307321, 50.045884, 58.742307, 62.366034, 60.166213]]),
array([[1, 1, 1, 1, 2, 2, 2, 2, 0],
       [1, 1, 1, 2, 2, 2, 2, 3, 0],
       [1, 1, 1, 1, 2, 2, 3, 3, 2],
       [0, 1, 1, 1, 0, 3, 3, 3, 2],
       [0, 1, 0, 0, 0, 3, 3, 3, 0],
       [1, 1, 0, 0, 3, 3, 0, 0, 0],
       [1, 1, 0, 1, 3, 3, 2, 1, 1]])),

       "17": ((6, 5), (0.6, 0.129096, 0.048828, 0.222076),
array([[1.864041e+00, 4.432889e+00, 6.311956e+00, 2.654280e+00, 1.912010e+00, 5.833797e+00, 2.794818e+00, 3.422686e+00, 1.748296e-01, 2.970219e+00, 1.388945e+00],
       [2.906939e+00, 1.297296e+00, 8.559583e+00, 8.003398e-01, 9.873536e-01, 5.105444e+00, 1.049587e+01, 1.345850e+00, 5.592108e+00, 3.226013e+00, 1.908344e-01],
       [6.713173e+00, 1.752331e+00, 4.390865e+00, 2.050603e+00, 8.711304e+00, 7.706095e-01, 8.218498e-01, 2.234567e+00, 8.338580e-01, 3.293815e+00, 5.430058e-01],
       [9.646865e+00, 1.796218e+00, 3.357212e+00, 4.177859e+00, 7.938566e+00, 2.848659e-01, 1.532829e+00, 9.413375e+00, 1.940443e+00, 2.902589e+00, 5.075948e+00],
       [4.755532e+00, 4.019696e+00, 1.062740e+00, 1.915935e+00, 5.316311e+00, 6.777291e+00, 6.280372e+00, 1.146492e+01, 2.866536e-01, 9.511573e-01, 3.748847e+00],
       [5.728955e-01, 3.756583e+00, 1.870234e+00, 2.215651e+00, 1.042448e+01, 2.264138e+01, 3.547671e+00, 4.154724e+00, 4.400122e+00, 1.308252e+01, 7.680946e+00],
       [1.455629e+00, 2.480491e+00, 8.465064e+00, 3.871816e+00, 3.503526e+00, 0.000000e+00, 6.865094e+00, 3.033251e+00, 1.160614e+01, 1.224659e-02, 4.011425e+00],
       [2.015195e+00, 7.238840e+00, 1.010192e+01, 3.995933e+00, 4.015114e+00, 4.628188e+00, 6.527245e+00, 7.865932e+00, 4.254089e-01, 3.389442e+00, 2.805231e+00],
       [6.744596e-01, 5.392216e+00, 2.328087e+00, 7.018923e+00, 1.066962e+01, 2.481954e+00, 6.866165e-01, 4.570490e+00, 2.580088e+01, 5.010473e+00, 3.058032e+00],
       [9.244201e+00, 1.069470e+01, 2.999845e+00, 2.112717e+01, 8.747328e+00, 1.316188e+00, 3.990755e+00, 3.382583e+01, 2.060988e+00, 7.039835e+00, 1.390385e+00],
       [2.782159e+00, 1.511451e+01, 4.882823e-01, 5.621786e-01, 1.515415e+01, 2.322636e+00, 8.566184e+00, 6.364302e+00, 2.505558e+00, 1.850263e+00, 7.950014e-01],
       [1.416677e+00, 6.697207e+00, 1.991169e+00, 1.005210e+01, 8.390594e+00, 8.310030e+00, 2.817146e+00, 1.003625e+01, 2.739339e+00, 6.338128e+00, 1.037500e+01],
       [2.852662e+00, 6.481832e+00, 2.182930e-01, 1.160502e+00, 1.391117e+00, 1.491163e-01, 4.306796e+00, 5.316608e+00, 5.845711e+00, 1.374475e+01, 4.621907e+00]]),
array([[71.666332, 68.601448, 68.634009, 64.337611, 66.303373, 67.672444, 71.698819, 69.689585, 73.043764, 73.360537, 72.034619],
       [67.202965, 62.851564, 59.285441, 59.292947, 62.117555, 59.677064, 59.97874 , 65.01494 , 65.219266, 68.504808, 69.47228 ],
       [62.869208, 56.860642, 52.274705, 53.364831, 54.744672, 53.04704 , 54.579923, 58.801295, 61.078713, 63.649117, 67.88577 ],
       [58.445538, 51.8063  , 45.124171, 44.194222, 46.324544, 48.696006, 49.52808 , 53.494152, 56.184942, 59.68937 , 63.950931],
       [53.038715, 45.370839, 40.095852, 36.715915, 38.190351, 39.428785, 38.369929, 43.200937, 51.614334, 56.694107, 60.360101],
       [50.209168, 42.332165, 36.085226, 30.082362, 23.396044, 13.200037, 26.071884, 33.910525, 43.795569, 51.502716, 55.540071],
       [49.93441 , 44.855214, 32.710972, 22.437219, 11.734204,  0.      , 11.153802, 27.264255, 38.388648, 54.278053, 55.480781],
       [54.92401 , 50.122465, 37.810068, 27.851872, 18.749801,  9.718407, 19.818101, 33.100677, 50.626422, 55.32289 , 58.823328],
       [60.738006, 57.219491, 50.007677, 39.54233 , 29.632524, 23.359505, 30.310245, 46.238818, 55.142871, 65.75472 , 63.413494],
       [67.142942, 67.393047, 61.863651, 52.770676, 43.915917, 35.544591, 41.167578, 54.764318, 81.758574, 74.275157, 71.613179],
       [79.185298, 76.813355, 72.847959, 73.794421, 56.428446, 49.178814, 51.78716 , 70.263963, 80.132438, 80.762877, 77.252032],
       [83.639431, 82.135045, 78.203581, 74.017612, 70.633148, 60.79365 , 66.047469, 73.63004 , 84.171781, 85.38819 , 82.232262],
       [77.071315, 74.945932, 73.945339, 69.647549, 69.635151, 70.575834, 71.22795 , 76.52552 , 79.498933, 79.730411, 78.392432]]),
array([[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
       [1, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2],
       [1, 2, 2, 2, 2, 2, 2, 3, 2, 3, 3],
       [1, 1, 2, 2, 2, 2, 3, 3, 2, 3, 3],
       [2, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3],
       [1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 1],
       [1, 1, 1, 1, 1, 0, 3, 3, 3, 3, 1],
       [0, 1, 1, 1, 1, 0, 3, 0, 0, 0, 1],
       [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1],
       [0, 0, 0, 0, 1, 0, 0, 3, 1, 1, 0],
       [0, 1, 0, 1, 1, 0, 0, 3, 3, 1, 0],
       [2, 2, 0, 2, 1, 0, 0, 3, 0, 0, 0],
       [2, 2, 1, 2, 2, 0, 0, 3, 2, 2, 2]]))
}

    if len(sys.argv) == 1:
        sum_incorrect_policies = max_distance_diff = 0
        for name in tests:
            print("Running test", name)
            incorrect_policies, distance_diff = evaluate(*tests[name])
            sum_incorrect_policies += incorrect_policies
            max_distance_diff = max(max_distance_diff, distance_diff)
            print()
        success = sum_incorrect_policies == 0 and max_distance_diff < 1e-2
        print("All tests passed." if success else "Some tests failed.", "The total number of positions with incorrect policies is", sum_incorrect_policies, "and the maximal of differences between the correct and your distance is", max_distance_diff)
    else:
        name = sys.argv[1]
        if name in tests:
            evaluate(*tests[name])
        else:
            print("Unknown test", name)

"""
To run all tests, run the command
$ python3 probability_test.py

To run a test NAME, run the command
$ python3 probability_test.py NAME
"""
if __name__ == "__main__":
    main()
